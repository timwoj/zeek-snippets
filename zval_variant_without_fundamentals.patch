diff --git a/src/Val.h b/src/Val.h
index 57887a3c9..eb86cb319 100644
--- a/src/Val.h
+++ b/src/Val.h
@@ -1296,25 +1296,7 @@ public:
 			// TODO: should this be an error via reporter?
 			}
 
-		if constexpr ( std::is_same_v<T, BoolVal> || std::is_same_v<T, IntVal> || std::is_same_v<T, EnumVal> )
-			return std::get<bro_int_t>(record_val->at(field).var);
-		else if constexpr ( std::is_same_v<T, CountVal> )
-			return std::get<bro_uint_t>(record_val->at(field).var);
-		else if constexpr ( std::is_same_v<T, DoubleVal> || std::is_same_v<T, TimeVal> || std::is_same_v<T, IntervalVal> )
-			return std::get<double>(record_val->at(field).var);
-		else if constexpr ( std::is_same_v<T, PortVal> ||
-		                    std::is_same_v<T, StringVal> ||
-		                    std::is_same_v<T, AddrVal> ||
-		                    std::is_same_v<T, SubNetVal> ||
-		                    std::is_same_v<T, File> ||
-		                    std::is_same_v<T, Func> ||
-		                    std::is_same_v<T, PatternVal> ||
-		                    std::is_same_v<T, TableVal> )
-			return std::get<T*>(record_val->at(field).var)->Get();
-		else
-			{
-			// TODO: error here
-			}
+		return std::get<T*>(record_val->at(field).var)->Get();
 		}
 
 	template <typename T,
diff --git a/src/ZVal.cc b/src/ZVal.cc
index 18effc28b..3824cf6e0 100644
--- a/src/ZVal.cc
+++ b/src/ZVal.cc
@@ -1,6 +1,7 @@
 // See the file "COPYING" in the main distribution directory for copyright.
 
 #include "zeek/ZeekString.h"
+#include "zeek/Val.h"
 #include "zeek/File.h"
 #include "zeek/Func.h"
 #include "zeek/OpaqueVal.h"
@@ -9,10 +10,8 @@
 
 using namespace zeek;
 
-
 bool ZVal::zval_error_status = false;
 
-
 bool zeek::IsManagedType(const TypePtr& t)
 	{
 	switch ( t->Tag() ) {
@@ -61,60 +60,50 @@ ZVal::ZVal(ValPtr v, const TypePtr& t)
 
 	switch ( t->Tag() ) {
 	case TYPE_BOOL:
+		var = static_cast<BoolVal*>(v.release());
+		break;
 	case TYPE_INT:
+		var = static_cast<IntVal*>(v.release());
+		break;
 	case TYPE_ENUM:
-		var = v->AsInt();
+		var = static_cast<EnumVal*>(v.release());
 		break;
-
 	case TYPE_COUNT:
-		var = v->AsCount();
+		var = static_cast<CountVal*>(v.release());
 		break;
-
 	case TYPE_PORT:
-		var = v.release()->AsPortVal();
+		var = static_cast<PortVal*>(v.release());
 		break;
-
 	case TYPE_DOUBLE:
+		var = static_cast<DoubleVal*>(v.release());
+		break;
 	case TYPE_INTERVAL:
+		var = static_cast<IntervalVal*>(v.release());
+		break;
 	case TYPE_TIME:
-		var = v->AsDouble();
+		var = static_cast<TimeVal*>(v.release());
 		break;
-
 	case TYPE_FUNC:
-		{
-		Func* f = v->AsFunc();
-		var = f;
-		Ref(f);
+		var = static_cast<FuncVal*>(v.release());
 		break;
-		}
-
 	case TYPE_FILE:
-		{
-		File* f = v->AsFile();
-		var = f;
-		Ref(f);
+		var = static_cast<FileVal*>(v.release());
 		break;
-		}
-
 	case TYPE_LIST:
-		var = v.release()->AsListVal();
+		var = static_cast<ListVal*>(v.release());
 		break;
-
 	case TYPE_OPAQUE:
-		var = v.release()->AsOpaqueVal();
+		var = static_cast<OpaqueVal*>(v.release());
 		break;
-
 	case TYPE_PATTERN:
-		var = v.release()->AsPatternVal();
+		var = static_cast<PatternVal*>(v.release());
 		break;
-
 	case TYPE_TABLE:
-		var = v.release()->AsTableVal();
+		var = static_cast<TableVal*>(v.release());
 		break;
-
 	case TYPE_VECTOR:
 		{
-		var = v.release()->AsVectorVal();
+		var = static_cast<VectorVal*>(v.release());
 
 		// Some run-time type-checking, sigh.
 		auto my_ytag = t->AsVectorType()->Yield()->Tag();
@@ -138,27 +127,22 @@ ZVal::ZVal(ValPtr v, const TypePtr& t)
 		}
 
 	case TYPE_RECORD:
-		var = v.release()->AsRecordVal();
+		var = static_cast<RecordVal*>(v.release());
 		break;
-
 	case TYPE_STRING:
-		var = v.release()->AsStringVal();
+		var = static_cast<StringVal*>(v.release());
 		break;
-
 	case TYPE_ADDR:
-		var = v.release()->AsAddrVal();
+		var = static_cast<AddrVal*>(v.release());
 		break;
-
 	case TYPE_SUBNET:
-		var = v.release()->AsSubNetVal();
+		var = static_cast<SubNetVal*>(v.release());
 		break;
-
 	case TYPE_ANY:
 		var = static_cast<Val*>(v.release());
 		break;
-
 	case TYPE_TYPE:
-		var = t->Ref();
+		var = static_cast<TypeVal*>(v.release());
 		break;
 
 	case TYPE_ERROR:
@@ -175,82 +159,68 @@ ValPtr ZVal::ToVal(const TypePtr& t) const
 
 	switch ( t->Tag() ) {
 	case TYPE_INT:
-		return val_mgr->Int(std::get<bro_int_t>(var));
+		return {NewRef(), std::get<IntVal*>(var)};
 
 	case TYPE_BOOL:
-		return val_mgr->Bool(std::get<bro_int_t>(var) ? true : false);
+		return {NewRef(), std::get<BoolVal*>(var)};
 
 	case TYPE_PORT:
 		return {NewRef(), std::get<PortVal*>(var)};
 
 	case TYPE_COUNT:
-		return val_mgr->Count(std::get<bro_uint_t>(var));
+		return {NewRef(), std::get<CountVal*>(var)};
 
 	case TYPE_DOUBLE:
-		return make_intrusive<DoubleVal>(std::get<double>(var));
+		return {NewRef(), std::get<DoubleVal*>(var)};
 
 	case TYPE_INTERVAL:
-		return make_intrusive<IntervalVal>(std::get<double>(var), Seconds);
+		return {NewRef(), std::get<IntervalVal*>(var)};
 
 	case TYPE_TIME:
-		return make_intrusive<TimeVal>(std::get<double>(var));
+		return {NewRef(), std::get<TimeVal*>(var)};
 
 	case TYPE_ENUM:
-		return t->AsEnumType()->GetEnumVal(std::get<bro_int_t>(var));
+		return {NewRef(), std::get<EnumVal*>(var)};
 
 	case TYPE_ANY:
 		{
 		int index = var.index();
 		switch ( index )
 			{
-			case 3: return {NewRef(), std::get<StringVal*>(var)};
-			case 4: return {NewRef(), std::get<AddrVal*>(var)};
-			case 5: return {NewRef(), std::get<SubNetVal*>(var)};
-			case 8: return {NewRef(), std::get<ListVal*>(var)};
-			case 9: return {NewRef(), std::get<OpaqueVal*>(var)};
-			case 10: return {NewRef(), std::get<PatternVal*>(var)};
-			case 11: return {NewRef(), std::get<TableVal*>(var)};
-			case 12: return {NewRef(), std::get<RecordVal*>(var)};
-			case 13: return {NewRef(), std::get<VectorVal*>(var)};
-			case 14:
-				{
-				TypePtr tp = {NewRef{}, std::get<Type*>(var)};
-				return make_intrusive<TypeVal>(tp);
-				}
-			case 15: return {NewRef(), std::get<Val*>(var)};
+			case 0: return {NewRef(), std::get<AddrVal*>(var)};
+			case 1: return {NewRef(), std::get<BoolVal*>(var)};
+			case 2: return {NewRef(), std::get<CountVal*>(var)};
+			case 3: return {NewRef(), std::get<DoubleVal*>(var)};
+			case 4: return {NewRef(), std::get<EnumVal*>(var)};
+			case 5: return {NewRef(), std::get<FileVal*>(var)};
+			case 6: return {NewRef(), std::get<FuncVal*>(var)};
+			case 7: return {NewRef(), std::get<IntVal*>(var)};
+			case 8: return {NewRef(), std::get<IntervalVal*>(var)};
+			case 9: return {NewRef(), std::get<ListVal*>(var)};
+			case 10: return {NewRef(), std::get<OpaqueVal*>(var)};
+			case 11: return {NewRef(), std::get<PatternVal*>(var)};
+			case 12: return {NewRef(), std::get<PortVal*>(var)};
+			case 13: return {NewRef(), std::get<RecordVal*>(var)};
+			case 14: return {NewRef(), std::get<StringVal*>(var)};
+			case 15: return {NewRef(), std::get<SubNetVal*>(var)};
+			case 16: return {NewRef(), std::get<TableVal*>(var)};
+			case 17: return {NewRef(), std::get<TimeVal*>(var)};
+			case 18: return {NewRef(), std::get<TypeVal*>(var)};
+			case 19: return {NewRef(), std::get<Val*>(var)};
+			case 20: return {NewRef(), std::get<VectorVal*>(var)};
 			default: return nullptr;
 			}
-
-		// std::variant<bro_int_t, bro_uint_t, double, StringVal*, AddrVal*, SubNetVal*,
-		//              File*, Func*, ListVal*, OpaqueVal*, PatternVal*, TableVal*,
-		//              RecordVal*, VectorVal*, Type*, Val*, Obj*, PortVal*> var;
 		}
+		break;
 
 	case TYPE_TYPE:
-		{
-		TypePtr tp = {NewRef{}, std::get<Type*>(var)};
-		return make_intrusive<TypeVal>(tp);
-		}
+		return {NewRef(), std::get<TypeVal*>(var)};
 
 	case TYPE_FUNC:
-		{
-		if ( Func* f = std::get<Func*>(var) )
-			{
-			FuncPtr fv_ptr = {NewRef{}, f};
-			return make_intrusive<FuncVal>(fv_ptr);
-			}
-		}
-
-		return nullptr;
+		return {NewRef(), std::get<FuncVal*>(var)};
 
 	case TYPE_FILE:
-		if ( File* f = std::get<File*>(var) )
-			{
-			FilePtr fv_ptr = {NewRef{}, f};
-			return make_intrusive<FileVal>(fv_ptr);
-			}
-
-		return nullptr;
+		return {NewRef(), std::get<FileVal*>(var)};
 
 	case TYPE_ADDR:		return {NewRef(), std::get<AddrVal*>(var)};
 	case TYPE_SUBNET:	return {NewRef(), std::get<SubNetVal*>(var)};
diff --git a/src/ZVal.h b/src/ZVal.h
index d4804feba..01a1748ab 100644
--- a/src/ZVal.h
+++ b/src/ZVal.h
@@ -6,22 +6,31 @@
 
 #include <variant>
 
+#include "zeek/IntrusivePtr.h"
 #include "zeek/Type.h"
 
-ZEEK_FORWARD_DECLARE_NAMESPACED(StringVal, zeek);
 ZEEK_FORWARD_DECLARE_NAMESPACED(AddrVal, zeek);
-ZEEK_FORWARD_DECLARE_NAMESPACED(SubNetVal, zeek);
-ZEEK_FORWARD_DECLARE_NAMESPACED(File, zeek);
-ZEEK_FORWARD_DECLARE_NAMESPACED(Func, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(BoolVal, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(CountVal, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(DoubleVal, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(EnumVal, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(FileVal, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(FuncVal, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(IntVal, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(IntervalVal, zeek);
 ZEEK_FORWARD_DECLARE_NAMESPACED(ListVal, zeek);
 ZEEK_FORWARD_DECLARE_NAMESPACED(OpaqueVal, zeek);
 ZEEK_FORWARD_DECLARE_NAMESPACED(PatternVal, zeek);
-ZEEK_FORWARD_DECLARE_NAMESPACED(TableVal, zeek);
-ZEEK_FORWARD_DECLARE_NAMESPACED(RecordVal, zeek);
-ZEEK_FORWARD_DECLARE_NAMESPACED(VectorVal, zeek);
 ZEEK_FORWARD_DECLARE_NAMESPACED(PortVal, zeek);
-ZEEK_FORWARD_DECLARE_NAMESPACED(Type, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(RecordVal, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(StringVal, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(SubNetVal, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(TableEntryVal, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(TableVal, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(TimeVal, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(TypeVal, zeek);
 ZEEK_FORWARD_DECLARE_NAMESPACED(Val, zeek);
+ZEEK_FORWARD_DECLARE_NAMESPACED(VectorVal, zeek);
 
 namespace zeek {
 
@@ -40,9 +49,8 @@ class ZVal {
 
 public:
 
-	// Constructor for hand-populating the values. This causes the variant
-	// to have a uint stored in it.
-	ZVal() : var(0) {}
+	// Constructor for hand-populating the values.
+	ZVal() = default;
 
 	// Construct from a given higher-level script value with a given type.
 	ZVal(ValPtr v, const TypePtr& t);
@@ -60,9 +68,27 @@ public:
 
 	friend void DeleteManagedType(ZVal& v);
 
-	std::variant<bro_int_t, bro_uint_t, double, StringVal*, AddrVal*, SubNetVal*,
-	             File*, Func*, ListVal*, OpaqueVal*, PatternVal*, TableVal*,
-	             RecordVal*, VectorVal*, Type*, Val*, Obj*, PortVal*> var;
+	std::variant<AddrVal*,
+	             BoolVal*,
+	             CountVal*,
+	             DoubleVal*,
+	             EnumVal*,
+	             FileVal*,
+	             FuncVal*,
+	             IntVal*,
+	             IntervalVal*,
+	             ListVal*,
+	             OpaqueVal*,
+	             PatternVal*,
+	             PortVal*,
+	             RecordVal*,
+	             StringVal*,
+	             SubNetVal*,
+	             TableVal*,
+	             TimeVal*,
+	             TypeVal*,
+	             Val*,
+	             VectorVal*> var;
 
 	// A class-wide status variable set to true when a run-time
 	// error associated with ZVal's occurs.  Static because often
