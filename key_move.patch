diff --git a/src/Conn.cc b/src/Conn.cc
index ccf236a2a..11ab6faa6 100644
--- a/src/Conn.cc
+++ b/src/Conn.cc
@@ -25,14 +25,13 @@ namespace zeek {
 uint64_t Connection::total_connections = 0;
 uint64_t Connection::current_connections = 0;
 
-Connection::Connection(SessionManager* s, const detail::ConnIDKey& k, double t,
+Connection::Connection(SessionManager* s, detail::ConnIDKey k, double t,
                        const ConnID* id, uint32_t flow, const Packet* pkt)
 	: Session(t, connection_timeout, connection_status_update,
 	          detail::connection_status_update_interval)
 	{
 	sessions = s;
-	key = k;
-	hash_key = k.GetHashKey();
+	key = std::move(k);
 	key_valid = true;
 
 	orig_addr = id->src_addr;
diff --git a/src/Conn.h b/src/Conn.h
index d408baab3..011514bf7 100644
--- a/src/Conn.h
+++ b/src/Conn.h
@@ -73,7 +73,7 @@ static inline int addr_port_canon_lt(const IPAddr& addr1, uint32_t p1,
 class Connection final : public Session {
 public:
 
-	Connection(SessionManager* s, const detail::ConnIDKey& k, double t, const ConnID* id,
+	Connection(SessionManager* s, detail::ConnIDKey k, double t, const ConnID* id,
 	           uint32_t flow, const Packet* pkt);
 	~Connection() override;
 
@@ -115,11 +115,11 @@ public:
 	// should be marked invalid.
 	const detail::ConnIDKey& Key() const	{ return key; }
 	const std::unique_ptr<detail::HashKey>& HashKey() const override
-		{ return hash_key; }
+		{ return key.hash_key; }
 	void ClearKey() override
 		{
 		key_valid = false;
-		hash_key.reset();
+		key.hash_key.reset();
 		}
 	bool IsKeyValid() const	override	{ return key_valid; }
 
diff --git a/src/IPAddr.cc b/src/IPAddr.cc
index c97654fd0..79c8f1ac4 100644
--- a/src/IPAddr.cc
+++ b/src/IPAddr.cc
@@ -15,15 +15,26 @@
 namespace zeek {
 
 const IPAddr IPAddr::v4_unspecified = IPAddr(in4_addr{});
-
 const IPAddr IPAddr::v6_unspecified = IPAddr();
 
-std::unique_ptr<detail::HashKey> detail::ConnIDKey::GetHashKey() const
+namespace detail {
+
+ConnIDKey& ConnIDKey::operator=(ConnIDKey&& rhs)
 	{
-	return std::make_unique<detail::HashKey>(this, sizeof(*this));
+	if ( this != &rhs )
+		{
+		memcpy(&ip1, &rhs.ip1, sizeof(in6_addr));
+		memcpy(&ip2, &rhs.ip2, sizeof(in6_addr));
+		port1 = rhs.port1;
+		port2 = rhs.port2;
+		transport = rhs.transport;
+		hash_key = std::move(rhs.hash_key);
+		}
+
+	return *this;
 	}
 
-detail::ConnIDKey detail::BuildConnIDKey(const ConnID& id)
+ConnIDKey BuildConnIDKey(const ConnID& id)
 	{
 	ConnIDKey key;
 
@@ -49,9 +60,16 @@ detail::ConnIDKey detail::BuildConnIDKey(const ConnID& id)
 
 	key.transport = id.proto;
 
+	// This never gets updated if the key fields change at all, but that
+	// shouldn't ever happen. Once a key is created, the key shouldn't
+	// change.
+	key.hash_key = std::make_unique<HashKey>(&key, sizeof(key));
+
 	return key;
 	}
 
+} // namespace detail
+
 IPAddr::IPAddr(const String& s)
 	{
 	Init(s.CheckString());
diff --git a/src/IPAddr.h b/src/IPAddr.h
index 980c0e01e..17b3d6596 100644
--- a/src/IPAddr.h
+++ b/src/IPAddr.h
@@ -9,6 +9,7 @@
 #include <memory>
 
 #include "zeek/threading/SerialTypes.h"
+#include "zeek/Hash.h"
 
 typedef in_addr in4_addr;
 
@@ -19,24 +20,27 @@ struct ConnID;
 
 namespace detail {
 
-class HashKey;
-
-struct ConnIDKey {
+class ConnIDKey {
+public:
 	in6_addr ip1;
 	in6_addr ip2;
 	uint16_t port1;
 	uint16_t port2;
 	TransportProto transport;
+	std::unique_ptr<HashKey> hash_key;
 
-	ConnIDKey() : port1(0), port2(0), transport(TRANSPORT_UNKNOWN)
+	ConnIDKey() : port1(0), port2(0), transport(TRANSPORT_UNKNOWN), hash_key(nullptr)
 		{
 		memset(&ip1, 0, sizeof(in6_addr));
 		memset(&ip2, 0, sizeof(in6_addr));
 		}
 
-	ConnIDKey(const ConnIDKey& rhs)
+	// Because of the unique_ptr, don't allow copying.
+	ConnIDKey(const ConnIDKey& rhs) = delete;
+
+	ConnIDKey(ConnIDKey&& rhs)
 		{
-		*this = rhs;
+		*this = std::move(rhs);
 		}
 
 	bool operator<(const ConnIDKey& rhs) const { return memcmp(this, &rhs, sizeof(ConnIDKey)) < 0; }
@@ -46,15 +50,9 @@ struct ConnIDKey {
 	bool operator>=(const ConnIDKey& rhs) const { return memcmp(this, &rhs, sizeof(ConnIDKey)) >= 0; }
 	bool operator>(const ConnIDKey& rhs) const { return memcmp(this, &rhs, sizeof(ConnIDKey)) > 0; }
 
-	ConnIDKey& operator=(const ConnIDKey& rhs)
-		{
-		if ( this != &rhs )
-			memcpy(this, &rhs, sizeof(ConnIDKey));
-
-		return *this;
-		}
+	ConnIDKey& operator=(ConnIDKey&& rhs);
 
-	std::unique_ptr<HashKey> GetHashKey() const;
+	const std::unique_ptr<HashKey>& GetHashKey() const { return hash_key; }
 };
 
 /**
@@ -453,6 +451,7 @@ public:
 	static const IPAddr v6_unspecified;
 
 private:
+
 	friend class IPPrefix;
 
 	/**
diff --git a/src/SessionManager.cc b/src/SessionManager.cc
index ef9bf63fe..48b6f62d8 100644
--- a/src/SessionManager.cc
+++ b/src/SessionManager.cc
@@ -138,15 +138,16 @@ void SessionManager::ProcessTransportLayer(double t, const Packet* pkt, size_t r
 
 	// FIXME: The following is getting pretty complex. Need to split up
 	// into separate functions.
-	auto it = session_map.find(key.GetHashKey()->Hash());
+	detail::hash_t hash = key.GetHashKey()->Hash();
+	auto it = session_map.find(hash);
 	if (it != session_map.end() )
 		conn = static_cast<Connection*>(it->second);
 
 	if ( ! conn )
 		{
-		conn = NewConn(key, t, &id, data, proto, ip_hdr->FlowLabel(), pkt);
+		conn = NewConn(std::move(key), t, &id, data, proto, ip_hdr->FlowLabel(), pkt);
 		if ( conn )
-			InsertSession(key.GetHashKey()->Hash(), conn);
+			InsertSession(hash, conn);
 		}
 	else
 		{
@@ -156,9 +157,9 @@ void SessionManager::ProcessTransportLayer(double t, const Packet* pkt, size_t r
 			conn->Event(connection_reused, nullptr);
 
 			Remove(conn);
-			conn = NewConn(key, t, &id, data, proto, ip_hdr->FlowLabel(), pkt);
+			conn = NewConn(std::move(key), t, &id, data, proto, ip_hdr->FlowLabel(), pkt);
 			if ( conn )
-				InsertSession(key.GetHashKey()->Hash(), conn);
+				InsertSession(hash, conn);
 			}
 		else
 			{
@@ -347,7 +348,6 @@ void SessionManager::Remove(Session* s)
 
 	if ( s->IsKeyValid() )
 		{
-		const detail::ConnIDKey& key = c->Key();
 		s->CancelTimers();
 
 		s->Done();
@@ -439,9 +439,9 @@ void SessionManager::GetStats(SessionStats& s)
 	s.num_packets = packet_mgr->PacketsProcessed();
 	}
 
-Connection* SessionManager::NewConn(const detail::ConnIDKey& k, double t, const ConnID* id,
-                                 const u_char* data, int proto, uint32_t flow_label,
-                                 const Packet* pkt)
+Connection* SessionManager::NewConn(detail::ConnIDKey k, double t, const ConnID* id,
+                                    const u_char* data, int proto, uint32_t flow_label,
+                                    const Packet* pkt)
 	{
 	// FIXME: This should be cleaned up a bit, it's too protocol-specific.
 	// But I'm not yet sure what the right abstraction for these things is.
@@ -480,7 +480,7 @@ Connection* SessionManager::NewConn(const detail::ConnIDKey& k, double t, const
 	if ( ! WantConnection(src_h, dst_h, tproto, flags, flip) )
 		return nullptr;
 
-	Connection* conn = new Connection(this, k, t, id, flow_label, pkt);
+	Connection* conn = new Connection(this, std::move(k), t, id, flow_label, pkt);
 	conn->SetTransport(tproto);
 
 	if ( flip )
diff --git a/src/SessionManager.h b/src/SessionManager.h
index e77fd743b..e56b46ec6 100644
--- a/src/SessionManager.h
+++ b/src/SessionManager.h
@@ -143,7 +143,7 @@ protected:
 
 	using SessionMap = std::map<detail::hash_t, Session*>;
 
-	Connection* NewConn(const detail::ConnIDKey& k, double t, const ConnID* id,
+	Connection* NewConn(detail::ConnIDKey k, double t, const ConnID* id,
 	                    const u_char* data, int proto, uint32_t flow_label,
 	                    const Packet* pkt);
 
